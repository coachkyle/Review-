from flask import Flask, request, jsonify
import sqlite3
import openai
from flask_cors import CORS
from bs4 import BeautifulSoup
import requests

# Initialize Flask App
REview = Flask(__name__)
CORS(REview)  # Enable CORS for cross-origin requests

# Set up OpenAI API key
openai.api_key = "sk-...CqEA"

# Database setup
def init_db():
    conn = sqlite3.connect('app_config.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS configurations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    setting_key TEXT NOT NULL,
                    setting_value TEXT
                )''')
    conn.commit()
    conn.close()

init_db()

# Utility function to scrape reviews from a website
def scrape_reviews(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        # Example: Assuming reviews are contained in <div class="review"> tags
        review_elements = soup.find_all('div', class_='review')
        reviews = [review.get_text(strip=True) for review in review_elements]
        return reviews
    except Exception as e:
        return {"error": str(e)}

# Routes
@REview.route('/')
def home():
    return "Welcome to the Review Analysis App!"

# Analyze reviews from a URL
@REview.route('/analyze_url', methods=['POST'])
def analyze_url():
    data = request.json
    url = data.get('url')

    # Scrape reviews from the URL
    reviews = scrape_reviews(url)
    if isinstance(reviews, dict) and "error" in reviews:
        return jsonify({"error": reviews["error"]})

    if not reviews:
        return jsonify({"message": "No reviews found on the given URL"})

    # Use OpenAI to analyze the reviews
    prompt = """
    Analyze the following product reviews. Identify common broken features, suggest new features, and provide a baseline audience demographic:
    {}
    """.format("\n".join(reviews))

    try:
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=prompt,
            max_tokens=150
        )
        return jsonify({"analysis": response.choices[0].text.strip()})
    except Exception as e:
        return jsonify({"error": str(e)})

# Run the app
if __name__ == '__main__':
    REview.run(debug=True)
